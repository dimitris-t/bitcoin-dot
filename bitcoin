###############################################################################
#                            Bitcoin Core dot file                            #
#                     (`b` and `B` - prefixes for bitcoin)                    #
###############################################################################
# - Intended for macos but can be easily modified for BSD and Linux
# - To include it in your shell write the following line in ~/.zshrc 
#   `source <path_to_this_file>`
# - For more procedural options go to the bottom of the file
# - Read all the `Caution!` contained in the file before using it

#-----------------------------------------------------------------------------#
#                                    SETUP                                    #
#-----------------------------------------------------------------------------#

# Install brew dependencies
alias btools="brew install ccache llvm berkeley-db@4 automake boost \
              libevent libnatpmp libtool miniupmpc pkg-config python \
              qrencode qt@5 sqlite zeromq flame doxygen graphviz lcov"

# Make sure you are using the latest python 3 release first
alias bpips="python -m pip install pyzmq"

#-----------------------------------------------------------------------------#
#                                   VARIABLES                                 #
#                  (`_` - suffix for all variables in this file)              #
#-----------------------------------------------------------------------------#

# Bitcoin paths
export BPATH_="~/Documents/projects/bitcoin/bitcoin"
export BDATA_="~/Library/Application\ Support/Bitcoin"
export BDOT_="~/Documents/projects/bitcoin/btc-dot" # Location of THIS file
export BTEST_="$BPATH_/test"
export BFUNC_="$BTEST_/functional"
export BTEST_LOGS_="/var/folders/qy/mc4396sn0ql8dpl5q852sng40000gn/T"

# System tools
export ED_=code # or vim
export BC_=/opt/homebrew/opt/llvm/bin/clang
export BCPP_=/opt/homebrew/opt/llvm/bin/clang++
export BLLDB_=/opt/homebrew/opt/llvm/bin/lldb

# System info
export NCORES_="$(($(sysctl -n hw.physicalcpu)+1))"

# Number of jobs for parallel testing
# ** Caution! ** Optimised for my system, you may begin with smaller numbers
export NJOBS_16_=16
export NJOBS_64_=64

# RAM disc to be used with normal functional tests
# Size calc: { 4096 MiB * 2048 blocks/MiB = 8388608 blocks for 4 GiB }
export RAMDISK_SIZE_=8388608

# RAM disc to be used with normal extended functional tests
# Size calc: { 12288 MiB * 2048 blocks/MiB = 25165824 blocks for 12 GiB }
# ** Caution! ** Check how much RAM your system supports first 
export RAMDISK_SIZE_EXT_=25165824

#-----------------------------------------------------------------------------#
#                                     PATHS                                   #
#-----------------------------------------------------------------------------#

# Bitcoin paths
alias b="cd $BPATH_;pwd"
alias bdata="cd $BDATA_;pwd"
alias bdot="cd $BDOT_;pwd"
alias btestlogs="cd $BTEST_LOGS_"

# Open Bitcoin files
alias bconf="$ED_ $BDATA_/bitcoin.conf"
alias blog-main="$ED_ $BDATA_/debug.log"
alias blog-test="$ED_ $BDATA_/testnet3/debug.log"
alias blog-signet="$ED_ $BDATA_/signet/debug.log"
alias blog-regtest="$ED_ $BDATA_/regtest/debug.log"

#-----------------------------------------------------------------------------#
#                                    COMMANDS                                 #
#-----------------------------------------------------------------------------#

### bitcoind and bitcoin-cli

# GLOBAL: System-wide bitcoind and bitcoin-cli found in /usr/local/bin
# Build with `make install` and only for the latest stable release!
# bitcoind (kept as is)
# bitcoin-cli (kept as is)
alias bitcoin-clin="bitcoin-cli -named"

# LOCAL: bitcoind and bitcoin-cli within the scope of bitcoin core project path
alias bd="$BPATH_/src/bitcoind"
alias bcli="$BPATH_/src/bitcoin-cli"
alias bclin="$BPATH_/src/bitcoin-cli -named"

### Git

# Search for pattern in a repository
# https://www.kosli.com/blog/git-grep-like-a-pro-the-complete-guide/
alias bgg="git grep -n" # <pattern> <option: branch if on master>

# Show diffs of a file copmared to the original version
# Note: Set up the editor git uses for difftool and mergetool
# https://www.roboleary.net/vscode/2020/09/15/vscode-git.html
alias bdiff-orig="git difftool origin/master " # <plus the file>
alias bdiff="git difftool master " # <plus the file>

# Reset any changes and remove new files since the last commit
alias breset="git reset --hard HEAD; git clean -fd;"

# Get all new changes from origin
alias bupdate="git checkout master; git fetch origin; git merge;"

### Build 

# LLVM used with ccache by default
alias bc=$BC_ 
alias bcpp=$BCPP_ 
alias blldb=$BLLDB_

# Configure
alias bconfigure="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_ --with-incompatible-bdb --enable-surpress-external-warnings"
alias bconfigure-bare="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_"
alias bconfigure-debug="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_ --with-incompatible-bdb --enable-surpress-external-warnings --enable-debug"
alias bconfigure-fuzz="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_ --enable-fuzz --with-sanitizers=fuzzer,address,undefined"

# Make
alias bclean="make clean"
alias bcache-clean="ccache -C"
alias bmake="make -j $NCORES_"
alias bcheck="make -j $NCORES_ check"
alias bcov="make cov"
alias bdocs="make docs"
alias bdocs-clean="make clean-docs"

### Functional test environment support

# RAM disk to speed up or constraint testing environment size
alias bcreate-ram="diskutil erasevolume HFS+ ramdisk $(hdiutil attach -nomount ram://$RAMDISK_SIZE_)"
alias bcreate-ram-ext="diskutil erasevolume HFS+ ramdisk $(hdiutil attach -nomount ram://$RAMDISK_SIZE_EXT_)"
alias bdestroy-ram="umount /Volumes/ramdisk"

# Clean up node seeding and debug files after manual tests
alias bdata-clear-main="rm -fr $BDATA_/anchors.dat $BDATA_/peers.dat $BDATA_/debug.log"
alias bdata-clear-test="rm -fr $BDATA_/testnet3/anchors.dat $BDATA_/testnet3/peers.dat $BDATA_/testnet3/debug.log"
alias bdata-clear-signet="rm -fr $BDATA_/signet/anchors.dat $BDATA_/signet/peers.dat $BDATA_/signet/debug.log"
alias bdata-clear-regtest="rm -fr $BDATA_/regtest/anchors.dat $BDATA_/regtest/peers.dat $BDATA_/regtest/debug.log"

# Clean up test environment
alias btest-clean="rm -rf $BTEST_/cache; pkill -9 bitcoind;"

### Functional test run

# Functional tests
alias btest-plain="$BFUNC_/test_runner.py"

# Attach ramdisk support to functional tests
# Note: Have to manually create and destroy the ramdisk
alias btest-ram="btest-plain --cachedir=/Volumes/ramdisk/cache --tmpdir=/Volumes/ramdisk/tmp"

# Functional tests (optimum standalone configuration)
alias btest="bcreate-ram && btest-ram --jobs=$NJOBS_64_ && bdestroy-ram"

# Extended functional tests (optimum standalone configuration)
alias btest-ext="bcreate-ram-ext && btest-ram --jobs=$NJOBS_16_ --extended && bdestroy-ram"

#-----------------------------------------------------------------------------#
#                             REVIEW PROCEDURES                               #
#-----------------------------------------------------------------------------#

# Go to the bitcoin core project root directory

# Build and run unit and functional tests (most common option)
alias bb="bconfigure && bclean && bmake && bcheck && btest"

# Build and run unit and exetended functional tests (takes a little longer...)
alias bbe="bconfigure && bclean && bmake && bcheck && btest-ext"

# Clean up everything in the build and test chains in case of trouble
alias bclean-all="bclean; bcache-clean; btest-clean;"
