###############################################################################
#                            Bitcoin Core dot file                            #
#                     (`b` and `B` - prefixes for bitcoin)                    #
###############################################################################
# 1. Intended for macos but can be easily modified for other UNIX and Linux   #
# 2. To include it in your shell write the following line in ~/.zshrc         #
#    `source <path_to_this_file>`                                             #
# 3. For more procedural options go to the bottom of the file                 #
# 4. Read all `Caution!` contained in the file before use                     #
###############################################################################

#-----------------------------------------------------------------------------#
#                                   VARIABLES                                 #
#                  (`_` - suffix for all variables in this file)              #
#-----------------------------------------------------------------------------#

# Export the LLVM Brew path in order to overide the system default LLVM
# clang-tidy is now also dscoverable by bear
export PATH="$(brew --prefix)/opt/llvm/bin:$PATH"

# System tools
export ED_=code # or vim
export BC_=/opt/homebrew/opt/llvm/bin/clang
export BRCT_=/opt/homebrew/opt/llvm/bin/run-clang-tidy
export BCPP_=/opt/homebrew/opt/llvm/bin/clang++
export BLLDB_=/opt/homebrew/opt/llvm/bin/lldb

# System info
export NCORES_="$(($(sysctl -n hw.physicalcpu)+1))"

# Number of jobs for parallel testing
# ** Caution! ** Optimised for my system, you may begin with smaller numbers
export NJOBS_16_=16
export NJOBS_64_=64

# RAM disc to be used with normal functional tests
# Size calc: { 4096 MiB * 2048 blocks/MiB = 8388608 blocks for 4 GiB }
export RAMDISK_SIZE_=8388608

# RAM disc to be used with normal extended functional tests
# Size calc: { 12288 MiB * 2048 blocks/MiB = 25165824 blocks for 12 GiB }
# ** Caution! ** Check how much RAM your system supports first 
export RAMDISK_SIZE_EXT_=25165824

# Bitcoin paths
export BPATH_="~/Documents/projects/bitcoin/bitcoin"
export BDATA_="~/Library/Application\ Support/Bitcoin"
export BDOT_="~/Documents/projects/bitcoin/btc-dot" # Location of THIS file
export BTEST_="$BPATH_/test"
export BFUNC_="$BTEST_/functional"
export BTEST_LOGS_="/var/folders/qy/mc4396sn0ql8dpl5q852sng40000gn/T"
export BDOX_="$BPATH_/doc/doxygen/html"

# Git 
export BGMASTER_="master"

#-----------------------------------------------------------------------------#
#                                    SETUP                                    #
#-----------------------------------------------------------------------------#

# Install brew dependencies
alias btools="brew install ccache llvm berkeley-db@4 automake boost \
              libevent libnatpmp libtool miniupmpc pkg-config python \
              qrencode qt@5 sqlite zeromq flame doxygen graphviz lcov \
              bear clang-format flake8 mypy codespell vulture"

# Upadte all installed brew packages
btools-update() {
    brew update; 
    echo "Running brew upgrade..."
    brew upgrade; 
    echo "Running brew cleanup..."
    brew cleanup;
}

# Make sure you are using the latest python 3 release first with `which python`
alias bpips="python -m pip install pyzmq"

# Git difftool and mergetool default editor set up to vs code (default is vim)
bg-ed-setup() {
    git config --global diff.tool vscode
    git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'
    git config --global merge.tool vscode
    git config --global mergetool.vscode.cmd 'code --wait $MERGED'
}

# Open git global editor for manual editing
alias bg-ed="git config --global -e"

#-----------------------------------------------------------------------------#
#                                PATHS AND FILES                              #
#-----------------------------------------------------------------------------#

# Bitcoin paths
alias b="cd $BPATH_;pwd"
alias bdata="cd $BDATA_;pwd"
alias bdot="cd $BDOT_;pwd"
alias btestlogs="cd $BTEST_LOGS_;pwd"

# Open Bitcoin files
alias bconf="$ED_ $BDATA_/bitcoin.conf"
alias blog-main="$ED_ $BDATA_/debug.log"
alias blog-test="$ED_ $BDATA_/testnet3/debug.log"
alias blog-signet="$ED_ $BDATA_/signet/debug.log"
alias blog-regtest="$ED_ $BDATA_/regtest/debug.log"

# View doxygen generated documentation on firefox
alias bdox="open -a /Applications/Firefox.app $BDOX_/index.html"

#-----------------------------------------------------------------------------#
#                           BITCOIND AND BITCOIN-CLI                          #
#-----------------------------------------------------------------------------#

# GLOBAL: System-wide bitcoind and bitcoin-cli found in /usr/local/bin
# Build with `make install` and only for the latest stable release!
# bitcoind (kept as is)
# bitcoin-cli (kept as is)
alias bitcoin-clin="bitcoin-cli -named"

# LOCAL: bitcoind and bitcoin-cli within the scope of bitcoin core project path
alias bd="$BPATH_/src/bitcoind"
alias bcli="$BPATH_/src/bitcoin-cli"
alias bclin="$BPATH_/src/bitcoin-cli -named"

#-----------------------------------------------------------------------------#
#                                     GIT                                     #
#                           (bg and BG - prefixes)                            #
#-----------------------------------------------------------------------------#

# Name of the current branch
alias bg-name="git branch --show-current"

# Get all new changes from origin and update the local repository
alias bg-update="git checkout $BGMASTER_; git fetch origin; git merge;"

# Reset any changes and remove new files since the last commit
alias bg-reset="git reset --hard HEAD; git clean -fd;"

#------------------------===<<< Git quick searches >>>===---------------------#

# Search for pattern in a repository
alias bgg="git grep -n " # <pattern> <option: branch name if on master>

# Differences to a given number of commits back, default is 1
bgd-files() { 
    # $1: Number of commits backwards
    if [ $# -eq 0 ]; then
        git diff --name-only HEAD HEAD~1
    else
        git diff --name-only HEAD HEAD~$1 
    fi
}

# Files that have differences between this branch and master
alias bgd-files-master="git diff --name-only origin/$BGMASTER_ HEAD"

# Show diffs of a file on current branch file compared to master 
# git difftool <commit-to-compare-with> <file>
alias bgd-tool="git difftool origin/$BGMASTER_ " # <file>
# git difftool <commit1> <commit2> -- <file>

#--------------------------===<<< Git archaeology >>>===----------------------#

# Commit hash of the current commit
alias bg-last="git rev-parse HEAD"

# Commit hash of the initial commit
alias bg-first="git log --reverse | head -n 1"

# List all tracked files in the repository
alias bg-ls="git ls-files"

# Get the commit which changed last a line in a file
bg-blame() {
    # $1: line number
    # $2: file path
    git blame -L$1,$1 $2
}

# Get all the commits that changed the file provided as argument
alias bg-log-p="git log -p " # <path>

# Search commits the item (ex. a function name) is modified
alias bg-log-s="git log -S " # <item>

# Search commits the item (ex. a function name) is moved
alias bg-log-g="git log -G " # <item>

# Trace a span of lines in a file 
bg-log-l() {
    # $1: start line
    # $2: end line
    # $3: file path
    git log -L $1,$2:$3
}

# Follow the history of a file even if it was renamed at some point
alias bg-log-follow="git log --follow " # <path>

# See the history of a removed file
alias bg-log-removed="git log -- "

# Get the PR discussion from a commit hash
bg-logp-r() {
    # $1: commit hash
    git log --merges --reverse --oneline --ancestry-path $1..origin/$BGMASTER_ | head -n 1
}

#-----------------------------===<<< Git rebase >>>===------------------------#

# Display all commits of the branch since the fork from master
alias bg-commits="git log --oneline $BGMASTER_.."

# Display the number of commits of the branch since the fork from master
alias bg-commits-n="bg-commits | wc -l"

# Open interactive rebase to edit a given last number of commits
alias bg-rebase-i="git rebase -i HEAD~" # <number>

# Force push changes from rebase 
# Caution! is irreversible
alias bg-push-f="git push -f" 

#-----------------------------------------------------------------------------#
#                                    BUILD                                    #
#-----------------------------------------------------------------------------#

# LLVM used with ccache by default
alias bc=$BC_ 
alias bcpp=$BCPP_ 
alias blldb=$BLLDB_

# Configure
alias bconfigure="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_ --with-incompatible-bdb --enable-surpress-external-warnings"
alias bconfigure-bare="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_"
alias bconfigure-debug="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_ --with-incompatible-bdb --enable-surpress-external-warnings --enable-debug"
alias bconfigure-fuzz="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_ --enable-fuzz --with-sanitizers=fuzzer,address,undefined"

# Make
alias bdistclean="make distclean" # Includes make clean as well
alias bclean="make clean"
alias bmake="make -j $NCORES_"
alias bcheck="make -j $NCORES_ check" # Unit and util tests
alias bcache-clean="ccache -C"

#-----------------------------------------------------------------------------#
#                                    TESTS                                    #
#-----------------------------------------------------------------------------#

#---------------------------===<<< Test support >>>===------------------------#

# RAM disk to speed up or constraint testing environment size
alias bcreate-ram="diskutil erasevolume HFS+ ramdisk $(hdiutil attach -nomount ram://$RAMDISK_SIZE_)"
alias bcreate-ram-ext="diskutil erasevolume HFS+ ramdisk $(hdiutil attach -nomount ram://$RAMDISK_SIZE_EXT_)"
alias bdestroy-ram="umount /Volumes/ramdisk"

# Clean up node seeding and debug files after manual tests
alias bdata-clear-main="rm -fr $BDATA_/anchors.dat $BDATA_/peers.dat $BDATA_/debug.log"
alias bdata-clear-test="rm -fr $BDATA_/testnet3/anchors.dat $BDATA_/testnet3/peers.dat $BDATA_/testnet3/debug.log"
alias bdata-clear-signet="rm -fr $BDATA_/signet/anchors.dat $BDATA_/signet/peers.dat $BDATA_/signet/debug.log"
alias bdata-clear-regtest="rm -fr $BDATA_/regtest/anchors.dat $BDATA_/regtest/peers.dat $BDATA_/regtest/debug.log"

# Clean up test environment
alias btest-clean="rm -rf $BTEST_/cache; pkill -9 bitcoind;"

#----------------------------===<<< Unit tests >>>===-------------------------#

# bmake (i.e. make check) above runs both the unit and util tests

# Run the unit test without re-compiling
btest-unit() {
    b # Bitcoin path alias
    cd src/test/
    test_bitcoin
    b
}

# Run util tests without recompiling
# TODO: Does not find config.ini file
alias btest-util="$BPATH_/test/util/test_runner.py"

#----------------------------===<<< Lint checks >>>===------------------------#

# Run locally all the lint checks that the CI does on Github
btest-lint() {
    b # Bitcoin path alias
    cd test/lint/test_runner && cargo fmt && cargo clippy && cargo run
    b
}

#-------------------------===<<< Functional tests >>>===----------------------#

# Functional tests
alias btest-plain="$BFUNC_/test_runner.py"

# Attach ramdisk support to functional tests
# Note: Have to manually create and destroy the ramdisk
alias btest-ram="btest-plain --cachedir=/Volumes/ramdisk/cache --tmpdir=/Volumes/ramdisk/tmp"

# Functional tests (optimum standalone configuration)
alias btest="bcreate-ram && btest-ram --jobs=$NJOBS_64_ && bdestroy-ram"

# Extended functional tests (optimum standalone configuration)
alias btest-ext="bcreate-ram-ext && btest-ram --jobs=$NJOBS_16_ --extended && bdestroy-ram"

# Coverage for the exteded functional tests to uncover missing rpcs from harness
alias btest-cov="bcreate-ram-ext && btest-ram --jobs=$NJOBS_16_ --extended --coverage && bdestroy-ram"

#---------------------------===<<< Test reports >>>===------------------------#

# Unit test coverage report
alias btest-report="open -a /Applications/Firefox.app $BPATH_/test_bitcoin.coverage/index.html"

# Unit and functional test coverage report
alias btest-report-total="open -a /Applications/Firefox.app $BPATH_/total.coverage/index.html"

# Test coverage
# TODO: cannot make coverage work yet!
bcov() {
    bconfigure-debug --enable-lcov
    bmake
    make check
    make cov
}

#-----------------------------------------------------------------------------#
#                       DOCUMENTATION AND CODING STYLE                        #
#-----------------------------------------------------------------------------#

# Doxygen (run from the project root)
alias bdox-make="make docs"
alias bdox-clean="make clean-docs"

# Denoise of errors from external dependencies with bear and clang-tidy
alias bct-make="make clean && bear --config src/.bear-tidy-config -- make -j $NCORES_"
alias bct="cd ./src/ && $BRCT_  -j $NCORES_"

# Format last commit with 0 lines of context, call from the git root folder,
# uses clang-format with the config defined in src/.clang-format
alias bformat="git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v"

#-----------------------------------------------------------------------------#
#                               TROUBLESHOOTING                               #
#-----------------------------------------------------------------------------#

# Clean up everything in the build and test chains in case of trouble
alias bclean-all="bclean; bcache-clean; btest-clean; bdox-clean"

#-----------------------------------------------------------------------------#
#                               REVIEW CHECKLIST                              #
#-----------------------------------------------------------------------------#

# 1. Go to the bitcoin core project root directory and pull all changes
alias bday="b; bg-reset; bg-update; c; git status"

# 2. Checkout the pr to review with `git checkout pr/<number>`

# 3a. Build and run unit and functional tests (most common option)
alias bb="bdistclean && bconfigure && bmake && bcheck && btest"

    # 3.1. Run the extended tests with `btest-ext` if basic tests succeed

# 3b. Build and run unit and exetended functional tests (takes a little longer...)
alias bbe="bdistclean && bconfigure && bmake && bcheck && btest-ext"
