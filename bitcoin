#!/usr/bin/env zsh

###############################################################################
#                                                                             #
#                            BITCOIN CORE DOT FILE                            #
#                                                                             #
#                     (`b` and `B` - prefixes for bitcoin)                    #
#                                                                             #
###############################################################################
#                                                                             #
# 1. Intended for macos but can be easily modified for other UNIX and Linux.  #
#                                                                             #
# 2. To include it in your shell write the following line in ~/.zshrc         #
#    `source <path-to-this-file>`                                             #
#                                                                             #
# 3. All git operations assume you are working from a fork of bitcoin         #
#                                                                             #
# 4. Read all `Caution!` tags in the file before first use of this file       #
#    or just live with the consequences!                                      #
#                                                                             #
# 5. The file has two sections, checklists and zsh                            #
#    - To go through procedures for everyday work use the checklist as        #
#      reference which is by no means exhastive                               #
#    - To change intended behavior or optimise  commands edit the zsh section #
#                                                                             #
# 6. Visual Studio Code optional integration                                  #
#    - If you are using visual studio code, there is an optional associated   #
#      file with debug configuration options and instructions in its comments #
#      section                                                                #                                                                       #
#    - Also, if you select vscode as the default editor below, difftool is    # 
#      setup to open the diffs there as well for more visual aid on changes   #
#                                                                             #
###############################################################################


#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#                                  CHECKLISTS                                 #
#//////////////////////////////////////////////////////////////////////////////


#-----------------------------------------------------------------------------#
#                                   SET UP                                    #
#-----------------------------------------------------------------------------#

# (1) Get all updates from upstream, this leaves us to the master branch 
# % bg-update

# (2) Get the PR to review from upstream
# % bg-getpr <pr-number>

# (3) Checkout the pr to review with `git checkout pr/<number>`
#     Note: We need to locate the last commit from GitHub
# % bg-pr <pr-number> 

# (4) Checkout the commit to test
# % git checkout <commit>

#-----------------------------------------------------------------------------#
#                                   PR REVIEWS                                #
#-----------------------------------------------------------------------------#

# (0) Set up checklist

# (1a) Build and run unit and functional tests from clean
# % bb
# To independently run the extended tests afterwards use
# % btest-ext

# (1b) Build and run unit and extended functional tests from clean
# % bbe

# (2) Get the changed files with
#     Note: The HEAD is set to the commit we checked out. In order to get the 
#     changed files that this PR touched upon, we may run a git log to find the
#     nearest merge commit to test against 
# % bgd-files <number-of-commits-backwards> # or
# % git diff --name-only <last-reviewed-commit> <new-commit>

# (3) Examine the changes in each file, will launch on the prefered editor
# % git difftool <last-reviewed-commit> <new-commit> -- <file>

#-----------------------------------------------------------------------------#
#                             BUILD AND TEST REFERENCE                        #
#-----------------------------------------------------------------------------#

# % bdistclean
# % bclean
# % bconfigure
# % bmake
# % bbuild
# % bcheck
# % btest
# % btest-ext
# % bclean-all

#-----------------------------------------------------------------------------#
#                                   DEBUG CPP                                 #
#-----------------------------------------------------------------------------#

# (0) Set up checklist

# (1) Build for debugging (btest and btest-ext for functional if needed)
# % bbd

# (2) Open workspace on vscode depending on what to debug and follow the 
#     instructions at the .vscode-workspace file of the workspace
# % vs-bitcoin

# (3) Choose between the debug configurations for bitcoin or unit tests

#-----------------------------------------------------------------------------#
#                               DEBUG PY --> CPP                              #
#-----------------------------------------------------------------------------#

# (0) Set up checklist

# (1) Build for debugging (btest and btest-ext for functional if needed)
# % bbd

# (2) Open workspace on vscode depending on what to debug and follow the 
#     instructions at the .vscode-workspace file of the workspace
# % vs-bitcoin

# (3) Set breakpoints to both cpp and py files 

# (4) Launch the debugger for the test through the "launch" configuration

# (5) Execution stops at the py breakpoint

# (6) Attach the python process with the token from the dropdown to lldb 

# (7) Run to continue debugging on the cpp file


#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#                                       ZSH                                   #
#//////////////////////////////////////////////////////////////////////////////


#-----------------------------------------------------------------------------#
#                                   VARIABLES                                 #
#                  (`_` - suffix for all variables in this file)              #
#-----------------------------------------------------------------------------#

# Export the LLVM Brew path in order to overide the system default LLVM
# clang-tidy is now also dscoverable by bear
export PATH="$(brew --prefix)/opt/llvm/bin:$PATH"

# System tools
export ED_=code # or vim
export BC_=/opt/homebrew/opt/llvm/bin/clang
export BRCT_=/opt/homebrew/opt/llvm/bin/run-clang-tidy
export BCPP_=/opt/homebrew/opt/llvm/bin/clang++
export BLLDB_=/opt/homebrew/opt/llvm/bin/lldb

# System info
export NCORES_="$(($(sysctl -n hw.physicalcpu)+1))"

# Number of jobs for parallel testing
# ** Caution! ** Optimised for my system, you may begin with smaller numbers
export NJOBS_16_=16
export NJOBS_64_=64

# RAM disc to be used with normal functional tests
# Size calc: { 4096 MiB * 2048 blocks/MiB = 8388608 blocks for 4 GiB }
export RAMDISK_SIZE_=8388608

# RAM disc to be used with normal extended functional tests
# Size calc: { 12288 MiB * 2048 blocks/MiB = 25165824 blocks for 12 GiB }
# ** Caution! ** Check how much RAM your system supports first 
export RAMDISK_SIZE_EXT_=25165824

# Bitcoin paths
export BITDEV_="~/Documents/projects/bitdev"
export BPATH_="$BITDEV_/bitcoin"
export BDATA_="~/Library/Application\ Support/Bitcoin"
export BDOT_="$BITDEV_/btc-dot" # Location of THIS file
export BTEST_="$BPATH_/test"
export BFUNC_="$BTEST_/functional"
export BTEST_LOGS_="/var/folders/qy/mc4396sn0ql8dpl5q852sng40000gn/T"
export BDOX_="$BPATH_/doc/doxygen/html"

# Master branch name (could be `main` for more modern repositories)
export BGMASTER_="master"

#-----------------------------------------------------------------------------#
#                                INSTALLATIONS                                #
#-----------------------------------------------------------------------------#

# Python
alias pip="python3 -m pip"

# Install brew dependencies
alias btools="brew install ccache llvm berkeley-db@4 automake boost \
              libevent libnatpmp libtool miniupmpc pkg-config python \
              qrencode qt@5 sqlite zeromq flame doxygen graphviz lcov \
              bear clang-format flake8 mypy codespell vulture"

# Upadte all installed brew packages
btools-update() {
    brew update; 
    echo "Running brew upgrade..."
    brew upgrade; 
    echo "Running brew cleanup..."
    brew cleanup;
}

# Make sure you are using the latest python 3 release first with `which python` 
alias bpips="/usr/bin/python3 -m pip install pyzmq"

#-----------------------------------------------------------------------------#
#                                 PATH SHORTCUTS                              #
#-----------------------------------------------------------------------------#

# This file in read mode
alias bdot-r="vi -R $BDOT_/bitcoin"

# Bitcoin paths
alias bitdev="cd $BITDEV_;pwd"
alias b="cd $BPATH_;pwd"
alias bdata="cd $BDATA_;pwd"
alias bdot="cd $BDOT_;pwd"
alias btestlogs="cd $BTEST_LOGS_;pwd"

# Open Bitcoin files
alias bconf="$ED_ $BDATA_/bitcoin.conf"
alias blog-main="$ED_ $BDATA_/debug.log"
alias blog-test="$ED_ $BDATA_/testnet3/debug.log"
alias blog-signet="$ED_ $BDATA_/signet/debug.log"
alias blog-regtest="$ED_ $BDATA_/regtest/debug.log"

# Visual Studio Code launch and debug workspace configurations
alias vs-bitcoin="code $BDOT_/bitcoin.code-workspace"

#-----------------------------------------------------------------------------#
#                           BITCOIND AND BITCOIN-CLI                          #
#-----------------------------------------------------------------------------#

# GLOBAL: System-wide bitcoind and bitcoin-cli found in /usr/local/bin
# Build with `make install` and only for the latest stable release!
# % bitcoind # kept as is
# % bitcoin-cli # kept as is
alias bitcoin-clin="bitcoin-cli -named"

# LOCAL: bitcoind and bitcoin-cli within the scope of bitcoin core project path
alias bd="$BPATH_/src/bitcoind"
alias bcli="$BPATH_/src/bitcoin-cli"
alias bclin="$BPATH_/src/bitcoin-cli -named"

# Kill bitcoind if forgotten to stop it properly
alias bkill="pkill -9 bitcoind;"

#-----------------------------------------------------------------------------#
#                                     GIT                                     #
#                           (bg and BG - prefixes)                            #
#-----------------------------------------------------------------------------#

#---------------------------===<<< Git configuration >>>===-------------------#

# Git difftool and mergetool default editor set up to vs code (default is vim)
bg-ed-setup() {
    git config --global diff.tool vscode
    git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'
    git config --global merge.tool vscode
    git config --global mergetool.vscode.cmd 'code --wait $MERGED'
}

# Open git global editor for manual editing
alias bg-ed="git config --global -e"

#-----------------------------===<<< Git basic >>>===-------------------------#

# Name of the current branch
alias bg-name="git branch --show-current"

# Commit hash of the current commit
alias bg-last="git rev-parse HEAD"

# Commit hash of the initial commit
alias bg-first="git log --reverse | head -n 1"

# List all tracked files in the repository
alias bg-ls="git ls-files"

# Reset any changes and remove new files since the last commit
alias bg-reset="git reset --hard HEAD; git clean -fd;"

#-----------------------------===<<< Git PR >>>===----------------------------#

bg-getpr() {
    # $1: PR number
    git fetch upstream pull/$1/head:pr-$1
}

# Checkout a pr
bg-pr() {
    # $1: PR number
    git checkout pr-$1
}

#--------------------------===<<< Git fork handling >>>===--------------------#

# Update the fork localy and on github from the original repository
bg-update() {
    b
    git fetch upstream
    git checkout master
    git merge upstream/master
    git push origin master
    echo "Enjoy 😉!"
}

# Update the current branch with all changes from master
bg-branch-update() {
    # $1: Branch name
    git checkout $1
    git rebase
}

#------------------------===<<< Git lists of files >>>===---------------------#

# Search for files including a pattern in a repository
alias bgg="git grep -n " # <pattern> <optional:branch-name> -- <path>

# List of files w/differences between given number of commits, default is 1
# Hint: Run git log before to see how many commits back is the upstream/master
bgd-files() { 
    # $1: Number of commits backwards
    if [ $# -eq 0 ]; then
        git diff --name-only HEAD HEAD~1
    else
        git diff --name-only HEAD HEAD~$1 
    fi
}

# List of files  differences  between two commits
alias bgd-commits=" git diff --name-only " # <commit-1> <commit-2>

# List of files  differences between this branch and the upstream
alias bgd-files-upstream="git diff --name-only upstream/$BGMASTER_ HEAD"

# Differences between ranges of commits to use after rebasing
bgd-range() {
    # $1: commit-1
    # $2: commit-2
    # $3: range 
    git range-diff $1~$3..$1 $2~$3..$2
}

#------------------------===<<< Git changes in file >>>===--------------------#

# File changes on current branch compared to upstream 
alias bgd-tool="git difftool upstream/$BGMASTER_ " # <file>

# File changes generic case 
# % git difftool <commit-to-compare-with-current> <file>
# % git difftool <commit1> <commit2> -- <file> # Open this specific file only
# % git difftool <commit1> <commit2> # Will open all changed files, one by one

#--------------------------===<<< Git archaeology >>>===----------------------#

# Get the commit which changed last a line in a file
bg-blame() {
    # $1: line number
    # $2: file path
    git blame -L$1,$1 $2
}

# Get all the commits that changed the file provided as argument
alias bg-log-p="git log -p " # <path>

# Search commits the item (ex. a function name) is modified
alias bg-log-s="git log -S " # <item>

# Search commits the item (ex. a function name) is moved
alias bg-log-g="git log -G " # <item>

# Trace a span of lines in a file 
bg-log-l() {
    # $1: start line
    # $2: end line
    # $3: file path
    git log -L $1,$2:$3
}

# Follow the history of a file even if it was renamed at some point
alias bg-log-follow="git log --follow " # <path>

# See the history of a removed file
alias bg-log-removed="git log -- "

# Get the PR discussion from a commit hash
bg-logp-r() {
    # $1: commit hash
    git log --merges --reverse --oneline --ancestry-path \
        $1..origin/$BGMASTER_ | head -n 1
}

#-----------------------------===<<< Git rebase >>>===------------------------#

# Display all the commits including the master's if on a branch
alias bg-oneline="git log --oneline "

# Display all commits of the branch since the fork from master
alias bg-commits="bg-oneline $BGMASTER_.."

# Display the number of commits of the branch since the fork from master
alias bg-commits-n="bg-commits | wc -l"

# Open interactive rebase to edit a given last number of commits
# Switch `pick` to `reword` or `squash` during the session
bg-rebase-i() {
    # $1: Number of last commits
    git rebase -i HEAD~$1
}

# Continue editing the next commit within the interactive rebase process
alias bg-continue="git rebase --continue"

# Force push changes from rebase 
# ** Caution! ** is irreversible
alias bg-force="git push -f" 

#-----------------------------------------------------------------------------#
#                                    BUILD                                    #
#-----------------------------------------------------------------------------#

# LLVM used with ccache by default
alias bc=$BC_ 
alias bcpp=$BCPP_ 
alias blldb=$BLLDB_

# Configure
alias bconfigure="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_ \
                  --with-incompatible-bdb --enable-surpress-external-warnings"

alias bconfigure-bare="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_"

alias bconfigure-debug="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_ \
                        --with-incompatible-bdb 
                        --enable-surpress-external-warnings --enable-debug"

alias bconfigure-fuzz="./autogen.sh && ./configure CC=$BC_ CXX=$BCPP_ \
                      --enable-fuzz --with-sanitizers=fuzzer,address,undefined"

# Make
alias bdistclean="make distclean" # Includes make clean as well
alias bclean="make clean"
alias bmake="make -j $NCORES_"
alias bcheck="make -j $NCORES_ check" # Unit and util tests
alias bcache-clean="ccache -C"

# Minimal build
alias bbuild="bconfigure && bmake"

#-----------------------------------------------------------------------------#
#                                    TESTS                                    #
#-----------------------------------------------------------------------------#

#---------------------------===<<< Test support >>>===------------------------#

# RAM disk to speed up or constraint testing environment size
alias bcreate-ram="diskutil erasevolume HFS+ ramdisk \
                  $(hdiutil attach -nomount ram://$RAMDISK_SIZE_)"

alias bcreate-ram-ext="diskutil erasevolume HFS+ ramdisk \
                       $(hdiutil attach -nomount ram://$RAMDISK_SIZE_EXT_)"

alias bdestroy-ram="umount /Volumes/ramdisk"

# Clean up node seeding and debug files after manual tests
alias bdata-clear-main="rm -fr $BDATA_/anchors.dat $BDATA_/peers.dat \
                        $BDATA_/debug.log"

alias bdata-clear-test="rm -fr $BDATA_/testnet3/anchors.dat \
                        $BDATA_/testnet3/peers.dat $BDATA_/testnet3/debug.log"

alias bdata-clear-signet="rm -fr $BDATA_/signet/anchors.dat \
                        $BDATA_/signet/peers.dat $BDATA_/signet/debug.log"

alias bdata-clear-regtest="rm -fr $BDATA_/regtest/anchors.dat \
                        $BDATA_/regtest/peers.dat $BDATA_/regtest/debug.log"

# Wipe out regtest for a clean run
alias bdata-erase-regtest="rm -fr $BDATA_/regtest/*"

# Clean up test environment
alias btest-clean="rm -rf $BTEST_/cache; pkill -9 bitcoind;"

#----------------------------===<<< Unit tests >>>===-------------------------#

# bmake (i.e. make check) above runs both the unit and util tests

# Run the unit test without re-compiling
btest-unit() {
    b
    cd src/test/
    test_bitcoin
    b
}

btest-unit-one() {
    # $1: module (file name)
    # $2: test case
    b
    ./src/test/test_bitcoin --run_test=$1/$2
}

# Run util tests without recompiling
# TODO: Fix not finding config.ini file
alias btest-util="$BPATH_/test/util/test_runner.py"

#----------------------------===<<< Lint checks >>>===------------------------#

# Run locally all the lint checks that the CI does on Github
btest-lint() {
    b
    cd test/lint/test_runner && cargo fmt && cargo clippy && cargo run
    b
}

#-------------------------===<<< Functional tests >>>===----------------------#

# Functional tests
alias btest-plain="$BFUNC_/test_runner.py"

# Attach ramdisk support to functional tests
# Note: Have to manually create and destroy the ramdisk
alias btest-ram="btest-plain --cachedir=/Volumes/ramdisk/cache \
                --tmpdir=/Volumes/ramdisk/tmp"

# Functional tests (optimum standalone configuration)
alias btest="bcreate-ram && btest-ram --jobs=$NJOBS_64_ && bdestroy-ram"

# Extended functional tests (optimum standalone configuration)
# to exclude a specific test use ex `--exclude=feature_dbcrash` 
alias btest-ext="bcreate-ram-ext && btest-ram --jobs=$NJOBS_16_ \
                --extended && bdestroy-ram"

# Coverage for the exteded functional tests to uncover missing rpcs from harness
alias btest-cov="bcreate-ram-ext && btest-ram --jobs=$NJOBS_16_ --extended \
                --coverage && bdestroy-ram"

#----------------------------===<<< Fuzz tests >>>===-------------------------#

# TODO

#---------------------------===<<< Test reports >>>===------------------------#

# Unit test coverage report
alias btest-report="open -a /Applications/Firefox.app \
                    $BPATH_/test_bitcoin.coverage/index.html"

# Unit and functional test coverage report
alias btest-report-total="open -a /Applications/Firefox.app \
                         $BPATH_/total.coverage/index.html"

# Test coverage
# TODO: Redesign, it doesn't work
bcov() {
    bconfigure-debug --enable-lcov
    bmake
    make check
    make cov
}

#-----------------------------===<<< Benchmark >>>===-------------------------#

# Build benchmark support after configuring build with bconfigure-debug
alias bbench-make="make -C src bitcoin_bench"

# Run the benchmarks
alias bbench="src/bench/bench_bitcoin"

# Get help
alias bbench-help="bbench -h"

# List all benchmarks
alias bbench-list="bbench -list"

#----------------------===<<< Build and test combos  >>>===-------------------#

# Build and run unit and functional tests from clean
alias bb="bconfigure && bmake && bcheck && btest"

# Build and run unit and extended functional tests from clean
alias bbe="bconfigure && bmake && bcheck && btest-ext"

# Build for debugging with unit tests only
alias bbd="bconfigure-debug && bmake && bcheck"

#-----------------------------------------------------------------------------#
#                       DOCUMENTATION AND CODING STYLE                        #
#-----------------------------------------------------------------------------#

# Doxygen (run from the project root)
alias bdox-make="make docs"
alias bdox-clean="make clean-docs"

# Denoise of errors from external dependencies with bear and clang-tidy
alias bct-make="make clean && bear --config src/.bear-tidy-config -- \
                make -j $NCORES_"

alias bct="cd ./src/ && $BRCT_  -j $NCORES_"

# Format last commit with 0 lines of context, call from the git root folder,
# uses clang-format with the config defined in src/.clang-format
alias bformat="git diff -U0 HEAD~1.. | \
              ./contrib/devtools/clang-format-diff.py -p1 -i -v"

# View doxygen generated documentation on firefox
alias bdox="open -a /Applications/Firefox.app $BDOX_/index.html"

#-----------------------------------------------------------------------------#
#                               TROUBLESHOOTING                               #
#-----------------------------------------------------------------------------#

# Clean up everything in the build and test chains in case of trouble
alias bclean-all="bclean; bcache-clean; btest-clean; bdox-clean"
