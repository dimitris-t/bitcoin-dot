###############################################################################
#                            Bitcoin Core dot file                            #
#                           (b - prefix for bitcoin)                          #
###############################################################################

# This configuration is intended for macos
# To include it in your shell write the following line in ~/.zshrc 
# source <path_to_this_file>

#-----------------------------------------------------------------------------#
#                                    SETUP                                    #
#-----------------------------------------------------------------------------#

# Install brew dependencies
alias btools="brew install ccache llvm berkeley-db@4 automake boost \
              libevent libnatpmp libtool miniupmpc pkg-config python \
              qrencode qt@5 sqlite zeromq flame doxygen graphviz lcov"

# Make sure you are using the latest python 3 release first
alias bpips="python -m pip install pyzmq"

#-----------------------------------------------------------------------------#
#                                    EXPORTS                                  #
#-----------------------------------------------------------------------------#

# System tools
export ED_=code # or vim
export BC_=/opt/homebrew/opt/llvm/bin/clang
export BCPP_=/opt/homebrew/opt/llvm/bin/clang++
export BLLDB_=/opt/homebrew/opt/llvm/bin/lldb

# System info
export NCORES_="$(($(sysctl -n hw.physicalcpu)+1))"
export NCORES_FIXED_=64

# Bitcoin paths
export BPATH_="~/Documents/projects/bitcoin/bitcoin"
export BDATA_="~/Library/Application\ Support/Bitcoin"
export BDOT_="~/Documents/projects/bitcoin/btc-dot" # Location of this file

#-----------------------------------------------------------------------------#
#                                 PATH ALIASES                                #
#-----------------------------------------------------------------------------#

# Bitcoin paths
alias b="cd $BPATH_;pwd"
alias bdata="cd $BDATA_;pwd"
alias bdot="cd $BDOT_;pwd"

# Open Bitcoin files
alias bconf="$ED_ $BDATA_/bitcoin.conf"
alias blog-main="$ED_ $BDATA_/debug.log"
alias blog-test="$ED_ $BDATA_/testnet3/debug.log"
alias blog-signet="$ED_ $BDATA_/signet/debug.log"
alias blog-regtest="$ED_ $BDATA_/regtest/debug.log"

#-----------------------------------------------------------------------------#
#                               COMMAND ALIASES                               #
#-----------------------------------------------------------------------------#

### Operations

# GLOBAL: System-wide bitcoind and bitcoin-cli found in /usr/local/bin
# Build with `make install` and only for the latest stable release!
# bitcoind (kept as is)
# bitcoin-cli (kept as is)
alias bitcoin-clin="bitcoin-cli -named"

# LOCAL: bitcoind and bitcoin-cli within the scope of bitcoin core project path
alias bd="$BPATH_/src/bitcoind"
alias bcli="$bpath/src/bitcoin-cli"
alias bclin="$bpath/src/bitcoin-cli -named"

### Git

# Show diffs of a file copmared to the original version
# Note: Set up the editor git uses for difftool and mergetool
# https://www.roboleary.net/vscode/2020/09/15/vscode-git.html
alias bdiff="git difftool origin/master " # <plus the file>

# Reset any changes and remove new files since the last commit
alias breset="git reset --hard HEAD; git clean -fd;"

# Get all new changes from origin
alias bmerge="git checkout master; git fetch origin; git merge;"

### Build 

# LLVM used with ccache by default
alias bc=$BC_ 
alias bcpp=$BCPP_ 
alias blldb=$BLLDB_

# Configure
alias bconfigure="./autogen.sh && ./configure CC=$BC_ CXX=$bcc_ --with-incompatible-bdb --enable-surpress-external-warnings"
alias bconfigure-bare="./autogen.sh && ./configure CC=$BC_ CXX=$bcc_"
alias bconfigure-debug="./autogen.sh && ./configure CC=$BC_ CXX=$bcc_ --with-incompatible-bdb --enable-surpress-external-warnings --enable-debug"
alias bconfigure-fuzz="./autogen.sh && ./configure CC=$BC_ CXX=$bcc_ --enable-fuzz --with-sanitizers=fuzzer,address,undefined"

# Make
alias bclean="make clean"
alias bcache-clean="ccache -C"
alias bmake="make -j $NCORES_"
alias bcheck="make -j $NCORES_ check"
alias bcov="make cov"
alias bdocs="make docs"
alias bdocs-clean="make clean-docs"

### Functional tests

# Functional tests, append --jobs=XX --extended, --coverage flags as needed

# TODO: add optimum core number
alias btest-run="test/functional/test_runner.py" 
alias btest-clear="rm -rf test/cache; pkill -9 bitcoind;"

# Createe a RAM disk (4 GiB) to speed up testing
# { 4096 MiB * 2048 blocks/MiB = 8388608 blocks for 4 GiB }
alias bcreate-ram="diskutil erasevolume HFS+ ramdisk $(hdiutil attach -nomount ram://8388608)"
alias btest-ram="test/functional/test_runner.py --cachedir=/Volumes/ramdisk/cache --tmpdir=/Volumes/ramdisk/tmp"
alias bdestroy-ram="umount /Volumes/ramdisk"
# All that combined
alias btest="bcreate-ram && btest-ram --jobs=$NCORES_FIXED_ && bdestroy-ram"
# Using `--extended --jobs=4`, if jobs >12 some tests fail
alias btest-ext="bcreate-ram && btest-ram --extended && bdestroy-ram" 

# Clean up node seeding and debug files after manual tests
alias bdata-clear-main="rm -fr $BDATA_/anchors.dat $BDATA_/peers.dat $BDATA_/debug.log"
alias bdata-clear-test="rm -fr $BDATA_/testnet3/anchors.dat $BDATA_/testnet3/peers.dat $BDATA_/testnet3/debug.log"
alias bdata-clear-signet="rm -fr $BDATA_/signet/anchors.dat $BDATA_/signet/peers.dat $BDATA_/signet/debug.log"
alias bdata-clear-regtest="rm -fr $BDATA_/regtest/anchors.dat $BDATA_/regtest/peers.dat $BDATA_/regtest/debug.log"

# Create image with predefined size to provide a controlled testing environment
bcreate-tmp() {
  hdiutil create -megabytes $1 -fs HFS+ -volname tmp ~/tmp.dmg
  hdiutil attach ~/tmp.dmg
}
export -f bcreate-tmp
# and destroy for proper housekeeping
bdestroy-tmp() {
  hdiutil detach /Volumes/tmp
  rm -fr ~/tmp.dmg
}
export -f bdestroy-tmp

#-----------------------------------------------------------------------------#
#                             REVIEW PROCEDURES                               #
#-----------------------------------------------------------------------------#

# 1. Build and run unit and functional tests
alias bb="bconfigure && bclean && bmake && bcheck && btest"

# 2. Build and run unit and exetended functional tests
alias bbe="bconfigure && bclean && bmake && bcheck && btest-ext"

#-----------------------------------------------------------------------------#
#                                 LIGHTNING                                   #
#-----------------------------------------------------------------------------#

# Lightning with config file
alias lightning="lnd --configfile=~/Documents/config/chaincode/lnd.conf;"

# Clear all output generatied by this file
clear
